const express = require('express');
const crypto = require('crypto');
const { authenticateToken, isAdmin } = require('../middleware/auth');
const { getSetting, setSetting } = require('../utils/settings');

const router = express.Router();

/**
 * Generate a secure 32-character API key
 */
function generateApiKey() {
  return crypto.randomBytes(32).toString('hex');
}

// GET /api/admin/registration/api-key - Get current registration API key
router.get('/api-key', authenticateToken, isAdmin, (req, res) => {
  try {
    let apiKey = getSetting('REGISTRATION_API_KEY');
    
    // Generate if doesn't exist
    if (!apiKey) {
      apiKey = generateApiKey();
      setSetting('REGISTRATION_API_KEY', apiKey);
      console.log('ðŸ”‘ Generated new Registration API Key');
    }

    res.json({
      api_key: apiKey,
      created_at: getSetting('REGISTRATION_API_KEY_CREATED') || 'Unknown',
      last_regenerated: getSetting('REGISTRATION_API_KEY_UPDATED') || 'Never'
    });
  } catch (error) {
    console.error('Error fetching registration API key:', error);
    res.status(500).json({ error: 'Failed to fetch API key' });
  }
});

// POST /api/admin/registration/regenerate-key - Regenerate registration API key
router.post('/regenerate-key', authenticateToken, isAdmin, (req, res) => {
  try {
    const newApiKey = generateApiKey();
    const now = new Date().toISOString();
    
    setSetting('REGISTRATION_API_KEY', newApiKey);
    setSetting('REGISTRATION_API_KEY_UPDATED', now);
    
    if (!getSetting('REGISTRATION_API_KEY_CREATED')) {
      setSetting('REGISTRATION_API_KEY_CREATED', now);
    }

    console.log(`ðŸ”‘ Registration API Key regenerated by admin: ${req.user.username}`);

    res.json({
      success: true,
      api_key: newApiKey,
      message: 'API key regenerated successfully. Update your Minecraft mod/plugin configuration.',
      regenerated_at: now
    });
  } catch (error) {
    console.error('Error regenerating registration API key:', error);
    res.status(500).json({ error: 'Failed to regenerate API key' });
  }
});

// GET /api/admin/registration/stats - Get registration statistics
router.get('/stats', authenticateToken, isAdmin, (req, res) => {
  const { getDatabase } = require('../database/init');
  const db = getDatabase();

  try {
    const stats = {
      total_codes: db.prepare('SELECT COUNT(*) as count FROM registration_codes').get().count,
      used_codes: db.prepare('SELECT COUNT(*) as count FROM registration_codes WHERE used = 1').get().count,
      active_codes: db.prepare("SELECT COUNT(*) as count FROM registration_codes WHERE used = 0 AND expires_at > datetime('now')").get().count,
      expired_codes: db.prepare("SELECT COUNT(*) as count FROM registration_codes WHERE used = 0 AND expires_at <= datetime('now')").get().count,
      registered_users: db.prepare('SELECT COUNT(*) as count FROM users WHERE minecraft_uuid IS NOT NULL').get().count,
      recent_registrations: db.prepare(`
        SELECT minecraft_username, created_at 
        FROM registration_codes 
        WHERE used = 1 
        ORDER BY used_at DESC 
        LIMIT 10
      `).all()
    };

    res.json(stats);
  } catch (error) {
    console.error('Error fetching registration stats:', error);
    res.status(500).json({ error: 'Failed to fetch stats' });
  }
});

module.exports = router;
