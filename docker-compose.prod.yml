# Production Docker Compose Configuration
# Usage: docker-compose -f docker-compose.prod.yml up -d

version: '3.8'

services:
  vonix-backend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    image: vonix-network:production
    container_name: vonix-backend-prod
    restart: always
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
    env_file:
      - .env
    volumes:
      # Persistent data
      - vonix-data:/app/data
      - vonix-logs:/app/logs
      - vonix-backups:/app/backups
    networks:
      - vonix-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: vonix-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - certbot-data:/var/www/certbot:ro
      - certbot-conf:/etc/letsencrypt:ro
    depends_on:
      - vonix-backend
    networks:
      - vonix-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Let's Encrypt SSL certificate automation
  certbot:
    image: certbot/certbot:latest
    container_name: vonix-certbot
    volumes:
      - certbot-data:/var/www/certbot
      - certbot-conf:/etc/letsencrypt
    command: certonly --webroot --webroot-path=/var/www/certbot --email your-email@example.com --agree-tos --no-eff-email -d vonix.network -d www.vonix.network
    depends_on:
      - nginx

  # Optional: Watchtower for automatic updates
  watchtower:
    image: containrrr/watchtower
    container_name: vonix-watchtower
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=86400  # Check daily
      - WATCHTOWER_INCLUDE_STOPPED=true
      - WATCHTOWER_REVIVE_STOPPED=false
    command: vonix-backend-prod

networks:
  vonix-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  vonix-data:
    driver: local
  vonix-logs:
    driver: local
  vonix-backups:
    driver: local
  certbot-data:
    driver: local
  certbot-conf:
    driver: local
